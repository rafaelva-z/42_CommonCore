
===ALGORITHMS===============================================
-BRUTEFORCE
[using for up to 5 numbers]

This one will always find the fewest amount of moves needed to
sort a push_swap problem, by trying every possible solution
starting with one move, then two, three, until it finds a
working combination of moves.
With more than 5 numbers it may take an unreasonable amout
of time to solve it. (like 20 minutes)

------------------------------------------------------------
-NEWSORT (provisory name)
[using for >5 numbers]

Starts by pushing the first two numbers to stack_b in descending
order.

Then calculates the amount of moves nedded (cost) to push each
number in stack_a to stack_b. Then searches on stack_b for the
closest number to that number (cheapest to send to stack_b)
so that when the number is pushed to stack_b,
the stack is always in descending order.
Then the number is pushed and repeat the search for the cheapest
number in stack_a.

when there are 3 numbers left on stack_a we sort them with [BRUTEFORCE]
and push all the numbers no stack_b back to stack_a, rotating stack_a
as needed for the numbers to be in their final position when all the numbers
are pushed.
------------------------------------------------------------

IDEA:
Find the biggest ascending sequence of numbers in the stack
(not necessarily back to back) and just leave them on stack a
so that you dont waste moves organizing whats left, after pushing
all the less expensive numbers.
example:
9 3 4 1 5 6 0 2
the sequence would be
- 3 4 - 5 6 - - 
so we ignore those numbers, and push all the others in order
       leaving us with the result below, with increased savings
|A  B| in moves as the pool of number increases. Although theres
|----| theres a chance that this won't be used depending on the
|3  9| original sequence.
|4  2|
|5  1|
|6  0|
|----|

===========================================================
other notes

amount of numbers - Most moves to solve

2-1
3-2
4-5
5-7
6-10--435216?

optimize ineficient moves:
(sa/sb) > ss
(ra/rb) > rr
(rra/rrb) > rrr